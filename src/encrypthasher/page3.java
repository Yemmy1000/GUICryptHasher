package encrypthasher;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.lang.management.ManagementFactory;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import javax.crypto.BadPaddingException;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import org.apache.commons.io.FilenameUtils;
//import org.apache.commons.io.FilenameUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;



public class page3 extends javax.swing.JFrame {
    public String myKey = "";
    public String fileText = null;
    /** Creates new form Find */
    public page3() {
        initComponents();
//        setExtendedState(MAXIMIZED_BOTH);
        jtpPlainText.setText("");
        encKey.setText("");       
        
        System.out.println("====================== BLOWFISH ===================");
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jtpBlowfishCypherText1 = new javax.swing.JTextArea();
        jtpBlowfishPlainText = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jbtDecryptBlowfish = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jbtBlowfish = new javax.swing.JButton();
        jbtnBack2Landingpage = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jtpPlainText = new javax.swing.JTextField();
        btnFilePicker = new javax.swing.JButton();
        filePath = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        encKey = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        jBtClearAll = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtpBlowfishPlainText1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jtpBlowfishCypherText = new javax.swing.JTextArea();

        fileChooser.setDialogTitle("Plaintext File Chooser Dialog");
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        jtpBlowfishCypherText1.setEditable(false);
        jtpBlowfishCypherText1.setColumns(20);
        jtpBlowfishCypherText1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishCypherText1.setForeground(new java.awt.Color(153, 0, 0));
        jtpBlowfishCypherText1.setLineWrap(true);
        jtpBlowfishCypherText1.setRows(5);
        jtpBlowfishCypherText1.setWrapStyleWord(true);

        jtpBlowfishPlainText.setColumns(20);
        jtpBlowfishPlainText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishPlainText.setForeground(new java.awt.Color(153, 0, 0));
        jtpBlowfishPlainText.setLineWrap(true);
        jtpBlowfishPlainText.setRows(5);
        jtpBlowfishPlainText.setWrapStyleWord(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Blowfish Algorithm");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Encrypted Text");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Type String: ");

        jbtDecryptBlowfish.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtDecryptBlowfish.setText("Decrypt");
        jbtDecryptBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtDecryptBlowfishActionPerformed(evt);
            }
        });

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("Decrypted Text");

        jbtBlowfish.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtBlowfish.setText("Encrypt");
        jbtBlowfish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtBlowfishActionPerformed(evt);
            }
        });

        jbtnBack2Landingpage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jbtnBack2Landingpage.setText("Back");
        jbtnBack2Landingpage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBack2LandingpageActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BLOWFISH ALGORITHM");

        jtpPlainText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jtpPlainText.setText("jTextField1");

        btnFilePicker.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnFilePicker.setText("Get File");
        btnFilePicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilePickerActionPerformed(evt);
            }
        });

        filePath.setBackground(new java.awt.Color(255, 255, 255));
        filePath.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        filePath.setText("No file selected");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel9.setText("Input File: ");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel10.setText("OR");

        encKey.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        encKey.setText("jTextField1");

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel37.setText("Key");

        jBtClearAll.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jBtClearAll.setText("Reset");
        jBtClearAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtClearAllActionPerformed(evt);
            }
        });

        jtpBlowfishPlainText1.setEditable(false);
        jtpBlowfishPlainText1.setColumns(20);
        jtpBlowfishPlainText1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishPlainText1.setLineWrap(true);
        jtpBlowfishPlainText1.setRows(5);
        jtpBlowfishPlainText1.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jtpBlowfishPlainText1);

        jtpBlowfishCypherText.setEditable(false);
        jtpBlowfishCypherText.setColumns(20);
        jtpBlowfishCypherText.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jtpBlowfishCypherText.setLineWrap(true);
        jtpBlowfishCypherText.setRows(5);
        jtpBlowfishCypherText.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jtpBlowfishCypherText);

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 104, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel9))
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                .add(979, 979, 979)
                                .add(btnFilePicker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jPanel1Layout.createSequentialGroup()
                                                .add(jScrollPane3)
                                                .add(41, 41, 41)
                                                .add(jLabel22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 97, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                            .add(jPanel1Layout.createSequentialGroup()
                                                .add(jbtBlowfish, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(493, 493, 493)))
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                            .add(jScrollPane2)
                                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                                                .add(jbtDecryptBlowfish, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .add(338, 338, 338))))
                                    .add(jPanel1Layout.createSequentialGroup()
                                        .add(filePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 943, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .add(0, 0, Short.MAX_VALUE))))))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanel1Layout.createSequentialGroup()
                        .add(37, 37, 37)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 57, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(64, 64, 64)
                                .add(encKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 510, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(571, 571, 571))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jLabel8)
                                .add(18, 18, 18)
                                .add(jtpPlainText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 844, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jBtClearAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 144, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))))
                .add(64, 64, 64))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .add(jPanel1Layout.createSequentialGroup()
                .add(417, 417, 417)
                .add(jLabel10)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(25, 25, 25)
                    .add(jbtnBack2Landingpage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 115, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(1163, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jLabel1)
                .add(3, 3, 3)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(89, 89, 89)
                        .add(jBtClearAll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(btnFilePicker, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 46, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel9)
                            .add(filePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 39, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel10)
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jtpPlainText, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(7, 7, 7)
                                .add(jLabel8)
                                .add(8, 8, 8)))))
                .add(28, 28, 28)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(encKey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(58, 58, 58)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jbtDecryptBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane2))
                            .add(jPanel1Layout.createSequentialGroup()
                                .add(jbtBlowfish, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 215, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                            .add(jLabel22)
                            .add(124, 124, 124)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(133, 133, 133)
                        .add(jLabel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 22, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 107, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(125, 125, 125))
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(627, 627, 627)
                    .add(jbtnBack2Landingpage, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {encKey, jtpPlainText}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jPanel1Layout.linkSize(new java.awt.Component[] {jbtBlowfish, jbtDecryptBlowfish}, org.jdesktop.layout.GroupLayout.VERTICAL);

        jScrollPane1.setViewportView(jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1280, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(13, 13, 13)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .add(1, 1, 1))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jbtBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtBlowfishActionPerformed

        myKey =  encKey.getText();
        String plainText = jtpPlainText.getText();
        if(myKey == null || myKey.isEmpty()){
            // JOptionPane.showMessageDialog(null, "Encryption Key cannot be empty!");
            JOptionPane optionPane = new JOptionPane("Encryption Key cannot be empty!",JOptionPane.ERROR_MESSAGE);
            JDialog dialog = optionPane.createDialog("Error!");
            dialog.setAlwaysOnTop(true); // to show top of all other application
            dialog.setVisible(true); // to visible the dialog
            encKey.grabFocus();
        }else{
            if(fileText != null ){
                mdBlowFish(fileText);
            }else if(!plainText.isEmpty()){
                mdBlowFish(plainText);
            }else{
                JOptionPane optionPane = new JOptionPane("Both File and Textbox cannot be empty!",JOptionPane.ERROR_MESSAGE);
                JDialog dialog = optionPane.createDialog("Error!");
                dialog.setAlwaysOnTop(true); // to show top of all other application
                dialog.setVisible(true); // to visible the dialog
                jtpPlainText.grabFocus();            
            }
            
        }
    }//GEN-LAST:event_jbtBlowfishActionPerformed

    private void jbtnBack2LandingpageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBack2LandingpageActionPerformed
        this.setVisible(false);
        new page2().setVisible(true);
    }//GEN-LAST:event_jbtnBack2LandingpageActionPerformed

    
    public void mdBlowFish(String plain_text){
            jtpBlowfishCypherText.setText("");
            jtpBlowfishPlainText1.setText("");
            resourcesUsage cpuusage = new resourcesUsage();
            Runtime runtime;
            byte[] bytes;
            
                try {

                    long start = System.nanoTime();
                     int cpuCount = ManagementFactory.getOperatingSystemMXBean().getAvailableProcessors();
                     long startCPUTime = ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime();
                    long startTime = System.nanoTime();  
                     
                    cpuusage.log("\n***CPU USAGE DETAILS**** \n");
                    cpuusage.log("Starting Test with " + cpuCount);
                    
                    BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();
                    String enc_output = obj_blowfish.encrypt(plain_text, myKey);
                    jtpBlowfishCypherText.setText(enc_output);

                    System.out.println("\n**MEMORY DETAILS  ** \n");
                    // Print initial memory usage.
                    runtime = Runtime.getRuntime();
                    cpuusage.printUsage(runtime);
                    float cpuPercent = cpuusage.calcCPU(startCPUTime, startTime, cpuCount);
                    cpuusage.log("CPU USAGE : " + cpuPercent + " % ");                    
                    long endTime = System.nanoTime();                  
                    System.out.println("AES-256 Encryption execution time: " + (endTime - startTime) + " nanosecond");  

            } catch (NoSuchAlgorithmException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NoSuchPaddingException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InvalidKeyException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IllegalBlockSizeException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (BadPaddingException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            }
    
    }
    
    
    
    private void jbtDecryptBlowfishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtDecryptBlowfishActionPerformed
//        long startTime = System.nanoTime();
        myKey =  encKey.getText();
        String enc_output = jtpBlowfishCypherText.getText();
        resourcesUsage cpuusage = new resourcesUsage();
        Runtime runtime;
        byte[] bytes;
        try {
            long start = System.nanoTime();
             int cpuCount = ManagementFactory.getOperatingSystemMXBean().getAvailableProcessors();
             long startCPUTime = ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime();
            long startTime = System.nanoTime();  

            cpuusage.log("\n***CPU USAGE DETAILS**** \n");
            cpuusage.log("Starting Test with " + cpuCount);


            BlowfishKnowledgeFactory obj_blowfish = new BlowfishKnowledgeFactory();
            String dec_output = obj_blowfish.decrypt(enc_output, myKey);
            jtpBlowfishPlainText1.setText(dec_output);

            System.out.println("\n**MEMORY DETAILS  ** \n");
            // Print initial memory usage.
            runtime = Runtime.getRuntime();
            cpuusage.printUsage(runtime);
            float cpuPercent = cpuusage.calcCPU(startCPUTime, startTime, cpuCount);
            cpuusage.log("CPU USAGE : " + cpuPercent + " % ");                    
            long endTime = System.nanoTime();                  
            System.out.println("AES-256 Encryption execution time: " + (endTime - startTime) + " nanosecond");     

        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchPaddingException ex) {
            Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jbtDecryptBlowfishActionPerformed

//    Method to check file extension
    public String getExtensionByApacheCommonLib(String filename) {
    return FilenameUtils.getExtension(filename);
    }
    
    
    private void btnFilePickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilePickerActionPerformed
        String file_Ext = "";
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            File file = fileChooser.getSelectedFile();
            filePath.setText(file.getAbsolutePath());
            String file_path = file.getAbsolutePath();
            
            
//          FileReader file2 = new FileReader(file.getAbsolutePath());
       try{

//          Check file extension
            file_Ext = getExtensionByApacheCommonLib(file_path);        
            if(file_Ext.equalsIgnoreCase("docx")){
                WordExtractor docxContent = new WordExtractor();
                fileText = docxContent.getFileContent(file_path);
            }else if(file_Ext.equalsIgnoreCase("pdf")){
                PdfFileExtractor PdfContent = new PdfFileExtractor();
                fileText = PdfContent.getPdfContent(file_path);
            }else{
                  getFile fileContent = new getFile();
                  fileText = getFile.getFileContent(file_path);

            }
    
        }catch (IOException ex) {
                filePath.setText("File error! Select another file.");
            } catch (InvalidFormatException ex) {
                Logger.getLogger(page3.class.getName()).log(Level.SEVERE, null, ex);
            } 

        } else {
            filePath.setText("File cancelled by user.");
        }


    }//GEN-LAST:event_btnFilePickerActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileChooserActionPerformed

    private void jBtClearAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtClearAllActionPerformed
        jtpBlowfishPlainText.setText("");
        encKey.setText("");
        fileText = null;
        filePath.setText("No file selected");
        jtpPlainText.setText("");
        jtpBlowfishCypherText.setText("");
        jtpBlowfishPlainText1.setText("");
        
    }//GEN-LAST:event_jBtClearAllActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
            for (int idx=0; idx<installedLookAndFeels.length; idx++)
                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
                    break;
                }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(page3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new page3().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilePicker;
    private javax.swing.JTextField encKey;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JLabel filePath;
    private javax.swing.JButton jBtClearAll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbtBlowfish;
    private javax.swing.JButton jbtDecryptBlowfish;
    private javax.swing.JButton jbtnBack2Landingpage;
    private javax.swing.JTextArea jtpBlowfishCypherText;
    private javax.swing.JTextArea jtpBlowfishCypherText1;
    private javax.swing.JTextArea jtpBlowfishPlainText;
    private javax.swing.JTextArea jtpBlowfishPlainText1;
    private javax.swing.JTextField jtpPlainText;
    // End of variables declaration//GEN-END:variables
    
}
